{
  "version": 3,
  "sources": ["../../../lib/content.ts", "../../../contentlayer.config.ts"],
  "sourcesContent": ["export function calculateReadingTime(mdxContent: any) {\n  // Define the average reading speed (words per minute)\n  const wordsPerMinute = 200;\n\n  // Strip MDX/HTML tags and count the words\n  const text = mdxContent.replace(/<\\/?[^>]+(>|$)/g, \"\"); // Basic stripping of HTML tags\n  const wordCount = text\n    .split(/\\s+/)\n    .filter((word: any) => word.length > 0).length;\n\n  // Calculate reading time\n  const readingTime = Math.ceil(wordCount / wordsPerMinute);\n\n  return readingTime;\n}\n", "// file: contentlayer.config.ts\n\nimport { calculateReadingTime } from \"@/lib/content\";\nimport { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    tag: { type: \"string\", required: true },\n    title: { type: \"string\", required: true },\n    cover: { type: \"string\", required: true },\n    summary: { type: \"string\", required: true },\n    publishedAt: { type: \"date\", required: true },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (post) => `/blog/${post._raw.flattenedPath}`,\n    },\n    readingTime: {\n      type: \"number\",\n      resolve: (post) => calculateReadingTime(post.body.raw),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"posts\",\n  documentTypes: [Post],\n});\n"],
  "mappings": ";AAAO,SAAS,qBAAqB,YAAiB;AAEpD,QAAM,iBAAiB;AAGvB,QAAM,OAAO,WAAW,QAAQ,mBAAmB,EAAE;AACrD,QAAM,YAAY,KACf,MAAM,KAAK,EACX,OAAO,CAAC,SAAc,KAAK,SAAS,CAAC,EAAE;AAG1C,QAAM,cAAc,KAAK,KAAK,YAAY,cAAc;AAExD,SAAO;AACT;;;ACXA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,KAAK,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACtC,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,EAC9C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,SAAS,KAAK,KAAK,aAAa;AAAA,IACrD;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,qBAAqB,KAAK,KAAK,GAAG;AAAA,IACvD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AACtB,CAAC;",
  "names": []
}
